{
  "version": 3,
  "sources": ["../../use-image/index.js"],
  "sourcesContent": ["var React = require('react');\n\nmodule.exports = function useImage(url, crossOrigin, referrerpolicy) {\n  // lets use refs for image and status\n  // so we can update them during render\n  // to have instant update in status/image when new data comes in\n  const statusRef = React.useRef('loading');\n  const imageRef = React.useRef();\n\n  // we are not going to use token\n  // but we need to just to trigger state update\n  const [_, setStateToken] = React.useState(0);\n\n  // keep track of old props to trigger changes\n  const oldUrl = React.useRef();\n  const oldCrossOrigin = React.useRef();\n  const oldReferrerPolicy = React.useRef();\n  if (\n    oldUrl.current !== url ||\n    oldCrossOrigin.current !== crossOrigin ||\n    oldReferrerPolicy.current !== referrerpolicy\n  ) {\n    statusRef.current = 'loading';\n    imageRef.current = undefined;\n    oldUrl.current = url;\n    oldCrossOrigin.current = crossOrigin;\n    oldReferrerPolicy.current = referrerpolicy;\n  }\n\n  React.useLayoutEffect(\n    function () {\n      if (!url) return;\n      var img = document.createElement('img');\n\n      function onload() {\n        img\n          // in Polotno app I found a case when loaded image was not rendered correctly at the first attempt\n          // I found that decoding it manually fixes the issue\n          // also it may be good idea decode it that way, so the work is done in the background\n          // and we don't block the main thread\n          // in context of canvas rendering, large images is a common case\n          .decode()\n          // catch and ignore decode errors because decode may fail but still will render just fine with drawImage on canvas.\n          // I got that case with very large image and chrome\n          .catch(() => {\n            // Intentionally ignore decode errors - image can still render fine on canvas\n          })\n          .finally(() => {\n            statusRef.current = 'loaded';\n            imageRef.current = img;\n            setStateToken(Math.random());\n          });\n      }\n\n      function onerror() {\n        statusRef.current = 'failed';\n        imageRef.current = undefined;\n        setStateToken(Math.random());\n      }\n\n      img.addEventListener('load', onload);\n      img.addEventListener('error', onerror);\n      crossOrigin && (img.crossOrigin = crossOrigin);\n      referrerpolicy && (img.referrerPolicy = referrerpolicy);\n      img.src = url;\n\n      return function cleanup() {\n        img.removeEventListener('load', onload);\n        img.removeEventListener('error', onerror);\n      };\n    },\n    [url, crossOrigin, referrerpolicy]\n  );\n\n  // return array because it is better to use in case of several useImage hooks\n  // const [background, backgroundStatus] = useImage(url1);\n  // const [patter] = useImage(url2);\n  return [imageRef.current, statusRef.current];\n};\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA,QAAI,QAAQ;AAEZ,WAAO,UAAU,SAAS,SAAS,KAAK,aAAa,gBAAgB;AAInE,YAAM,YAAY,MAAM,OAAO,SAAS;AACxC,YAAM,WAAW,MAAM,OAAO;AAI9B,YAAM,CAAC,GAAG,aAAa,IAAI,MAAM,SAAS,CAAC;AAG3C,YAAM,SAAS,MAAM,OAAO;AAC5B,YAAM,iBAAiB,MAAM,OAAO;AACpC,YAAM,oBAAoB,MAAM,OAAO;AACvC,UACE,OAAO,YAAY,OACnB,eAAe,YAAY,eAC3B,kBAAkB,YAAY,gBAC9B;AACA,kBAAU,UAAU;AACpB,iBAAS,UAAU;AACnB,eAAO,UAAU;AACjB,uBAAe,UAAU;AACzB,0BAAkB,UAAU;AAAA,MAC9B;AAEA,YAAM;AAAA,QACJ,WAAY;AACV,cAAI,CAAC,IAAK;AACV,cAAI,MAAM,SAAS,cAAc,KAAK;AAEtC,mBAAS,SAAS;AAChB,gBAMG,OAAO,EAGP,MAAM,MAAM;AAAA,YAEb,CAAC,EACA,QAAQ,MAAM;AACb,wBAAU,UAAU;AACpB,uBAAS,UAAU;AACnB,4BAAc,KAAK,OAAO,CAAC;AAAA,YAC7B,CAAC;AAAA,UACL;AAEA,mBAAS,UAAU;AACjB,sBAAU,UAAU;AACpB,qBAAS,UAAU;AACnB,0BAAc,KAAK,OAAO,CAAC;AAAA,UAC7B;AAEA,cAAI,iBAAiB,QAAQ,MAAM;AACnC,cAAI,iBAAiB,SAAS,OAAO;AACrC,0BAAgB,IAAI,cAAc;AAClC,6BAAmB,IAAI,iBAAiB;AACxC,cAAI,MAAM;AAEV,iBAAO,SAAS,UAAU;AACxB,gBAAI,oBAAoB,QAAQ,MAAM;AACtC,gBAAI,oBAAoB,SAAS,OAAO;AAAA,UAC1C;AAAA,QACF;AAAA,QACA,CAAC,KAAK,aAAa,cAAc;AAAA,MACnC;AAKA,aAAO,CAAC,SAAS,SAAS,UAAU,OAAO;AAAA,IAC7C;AAAA;AAAA;",
  "names": []
}
